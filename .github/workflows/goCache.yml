name: chache build
env:
  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
  TERRAFORM_AWS_ASSUME_ROLE: ${{ secrets.TERRAFORM_AWS_ASSUME_ROLE }}
  TERRAFORM_AWS_ASSUME_ROLE_DURATION: 14400 # 4 hours
  S3_INTEGRATION_BUCKET: ${{ secrets.S3_INTEGRATION_BUCKET }}
  KEY_NAME: ${{ secrets.KEY_NAME }}
  CF_IAM_ROLE: ${{ secrets.CF_IAM_ROLE }}
  CF_KEY_NAME: ${{ secrets.CF_KEY_NAME }}
  CACHE_EXIST: "false"
  CWA_GITHUB_REPO_NAME: "aws/amazon-cloudwatch-agent"
#  S3_INTEGRATION_BUCKET: "terraform-integration-test"
#  CACHE_DIR: "uniform-build-env-test/cache_build_env"
  CACHE_DIR: "s3://cloudwatch-agent-integration-bucket/cloudwatch-agent-integration-bucket/logs/"
#  CACHE_DIR: "uniform-build-env-test"

on:
  push:
    branches:
      - CWQS-739
  workflow_dispatch:
jobs:
  cache:
    name: build cache
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.TERRAFORM_AWS_ASSUME_ROLE }}
          aws-region: us-west-2
      - uses: actions/checkout@v3
        with:
          repository: ${{env.CWA_GITHUB_REPO_NAME}}
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ~1.19.2
      - name: set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
#      - name: go mod build
#        run: |
#          cd cmd/am
#          time go build .
      - name: go mod optimization
        run: |
          if aws s3 ls "s3://cloudwatch-agent-integration-bucket/bhanu/vendor.zip"; then
            cd packaging/uniformBuild
            time aws s3 cp "s3://cloudwatch-agent-integration-bucket/bhanu/vendor.zip" ./vendor.zip
            time unzip vendor.zip
            rm -r vendor.zip
            set +e
            time (go build -mod=vendor .)
            build_exit_status=$?
            echo  "build status code:$build_exit_status"
            if [ $build_exit_status -ne 0 ]; then   #if package is updated we are able to handle with is this functionality.
              echo "Error detected while running 'go build -mod=vendor .'"
              go mod tidy
              go mod vendor
              zip -r vendor.zip vendor
              aws s3 cp vendor.zip "s3://cloudwatch-agent-integration-bucket/bhanu/vendor.zip"
              rm -f vendor.zip
            else
              echo "Build successful"
            fi
          else
            time go mod vendor
            zip -r vendor.zip vendor
            aws s3 cp vendor.zip "s3://cloudwatch-agent-integration-bucket/bhanu/vendor.zip"
            echo "vendor zip added to the bucket"
          fi
          set -e