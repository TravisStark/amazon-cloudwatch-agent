name: chache build
env:
  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
  TERRAFORM_AWS_ASSUME_ROLE: ${{ secrets.TERRAFORM_AWS_ASSUME_ROLE }}
  TERRAFORM_AWS_ASSUME_ROLE_DURATION: 14400 # 4 hours
  S3_INTEGRATION_BUCKET: ${{ secrets.S3_INTEGRATION_BUCKET }}
  KEY_NAME: ${{ secrets.KEY_NAME }}
  CF_IAM_ROLE: ${{ secrets.CF_IAM_ROLE }}
  CF_KEY_NAME: ${{ secrets.CF_KEY_NAME }}
  CACHE_EXIST: "false"
  CWA_GITHUB_REPO_NAME: "aws/amazon-cloudwatch-agent"
#  S3_INTEGRATION_BUCKET: "terraform-integration-test"
#  CACHE_DIR: "uniform-build-env-test/cache_build_env"
  CACHE_DIR: "s3://cloudwatch-agent-integration-bucket/cloudwatch-agent-integration-bucket/logs/"
#  CACHE_DIR: "uniform-build-env-test"

on:
  push:
    branches:
      - CWQS-739
  workflow_dispatch:
jobs:
  cache:
    name: build cache
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.TERRAFORM_AWS_ASSUME_ROLE }}
          aws-region: us-west-2
      - uses: actions/checkout@v3
        with:
          repository: ${{env.CWA_GITHUB_REPO_NAME}}
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ~1.19.2
      - name: Cache binaries
        id: cached_binaries
        uses: actions/cache@v3
        with:
          key: "cached_binaries_${{ github.sha }}"
          path: go.mod
      - name: set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: list of files in s3
        run: |
          cd packaging/uniformBuild
          if aws s3 ls "s3://cloudwatch-agent-integration-bucket/bhanu/vendor.zip"; then
            aws s3 cp "s3://cloudwatch-agent-integration-bucket/bhanu/vendor.zip" ./vendor.zip
            unzip vendor.zip
            pwd
            ls -lirt
            go build -mod=vendor .
          else
            go build -mod=vendor .
            zip -r vendor.zip vendor
            aws s3 cp vendor.zip "s3://cloudwatch-agent-integration-bucket/bhanu/vendor.zip"
          fi
#            md5_variable=$(md5sum "./vendor.zip" | awk '{print $1}')
#            echo $md5_variable
#            unzip -q -d vedor vendor.zip
#            go mod vendor
#            echo "*******************vendor directory"
#            ls -lirt
#            rm -f vendor.zip
#            go mod vendor
#            echo "*******************vendor directory"
#            ls -lirt
#            zip -r vendor.zip vendor
#            md5_variable_vendor=$(md5sum "./vendor.zip" | awk '{print $1}')
#            echo $md5_variable_vendor
#            pwd
#            ls -lirt vendor

#          aws s3 ls "s3://cloudwatch-agent-integration-bucket/integration-test/"
#      - name: Check if directory is empty
#        id: check_empty_directory
#        run: |
#            if [ -z "$(aws s3 ls ${CACHE_DIR})" ]; then
#              echo "Directory is empty"
#              echo "::set-output name=is_empty::true"
#            else
#              echo "::set-output name=is_empty::false"
#            fi
#      - name: Build Uniform Build Env
#        if: contains(inputs.BucketKey, 'test') == false || steps.cached_binaries.outputs.cache-hit == false
#        run: |
#          cd packaging/uniformBuild
#          go build .
#      - name: Download RPM
#        run: |
#          aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.PackageBucketKey }}/linux/amd64/amazon-cloudwatch-agent.rpm .
#      - name: GetRPMSize
#        run: ls -lh
#      - name: Measure Installation Time
#        run : time -v rpm -i -y amazon-cloudwatch-agent.rpm
